// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String               @id @default(cuid())
  email             String               @unique
  password          String
  name              String?
  timezone          String               @default("UTC")
  language          String               @default("en")
  theme             String               @default("light")
  avatar            String?
  profileComplete   Boolean              @default(false)
  items             Item[]
  projects          Project[]
  contexts          Context[]
  tags              Tag[]
  reviews           Review[]
  timeEntries       TimeEntry[]
  comments          TaskComment[]
  notifications     CommentNotification[]
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
}

enum ItemStatus {
  INBOX
  NEXT_ACTION
  PROJECT
  WAITING_FOR
  SOMEDAY_MAYBE
  REFERENCE
  COMPLETED
  DELEGATED
  TRASHED
}

model Item {
  id            String           @id @default(cuid())
  title         String
  notes         String?
  status        ItemStatus       @default(INBOX)
  priority      Int             @default(0)
  dueDate       DateTime?
  plannedDate   DateTime?
  estimated     Int?            @db.Integer  // Store in minutes
  contexts      Context[]
  project       Project?         @relation(fields: [projectId], references: [id])
  projectId     String?
  user          User             @relation(fields: [userId], references: [id])
  userId        String
  tags          Tag[]
  TimeEntry     TimeEntry[]
  comments      TaskComment[]
  dependsOn     TaskDependency[] @relation("DependentTask")
  blocks        TaskDependency[] @relation("BlockerTask")
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

enum CommentType {
  COMMENT
  STATUS_CHANGE
  PRIORITY_CHANGE
  ESTIMATE_CHANGE
  DEPENDENCY_ADDED
  DEPENDENCY_REMOVED
}

model TaskComment {
  id            String              @id @default(cuid())
  content       String              @db.Text
  taskId        String
  userId        String
  type          CommentType
  createdAt     DateTime            @default(now())
  task          Item                @relation(fields: [taskId], references: [id])
  user          User                @relation(fields: [userId], references: [id])
  notifications CommentNotification[]
}

model CommentNotification {
  id          String      @id @default(cuid())
  commentId   String
  userId      String      
  read        Boolean     @default(false)
  createdAt   DateTime    @default(now())
  comment     TaskComment @relation(fields: [commentId], references: [id])
  user        User        @relation(fields: [userId], references: [id])
}

model TaskDependency {
  id              String    @id @default(cuid())
  dependentTaskId String
  blockerTaskId   String
  createdAt       DateTime  @default(now())
  dependentTask   Item      @relation("DependentTask", fields: [dependentTaskId], references: [id])
  blockerTask     Item      @relation("BlockerTask", fields: [blockerTaskId], references: [id])
}

model Project {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      String
  items       Item[]
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  parentId    String?
  parent      Project?  @relation("ProjectHierarchy", fields: [parentId], references: [id])
  children    Project[] @relation("ProjectHierarchy")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Context {
  id          String   @id @default(cuid())
  name        String
  description String?
  items       Item[]
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  color     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  items     Item[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  completedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TimeEntry {
  id        String    @id @default(cuid())
  startTime DateTime
  endTime   DateTime?
  duration  Int // Duration in minutes
  item      Item      @relation(fields: [itemId], references: [id])
  itemId    String
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  note      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
